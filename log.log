. freeze_future/tests/test_freeze_future.py::test_return_when_no_future_import
F freeze_future/tests/test_freeze_future.py::TestCxFreezeWithFuture::()::test_setup_with_future
 self = <test_freeze_future.TestCxFreezeWithFuture instance at 0x02E66490>
 
     def test_setup_with_future(self):
             from future import standard_library
             standard_library.install_aliases()
     
             #~ import urllib
 >           self.setup(**V.DEFAULT_OPTIONS)
 
 self       = <test_freeze_future.TestCxFreezeWithFuture instance at 0x02E66490>
 standard_library = <module 'future.standard_library' from 'C:\Python27\lib\site-packages\future\standard_library\__init__.pyc'>
 
 freeze_future\tests\test_freeze_future.py:45: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 C:\Python27\lib\site-packages\cx_Freeze\dist.py:362: in setup
     distutils.core.setup(**attrs)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 attrs = {'cmdclass': {'bdist_msi': <class cx_Freeze.windist.bdist_msi at 0x02ECAD18>, 'build': <class cx_Freeze.dist.build at ...amming\freeze_future\freeze_future\tests\example\foo.py>], 'name': 'foo', 'script_args': ['build', '--pdb', '-l'], ...}
 klass = <class cx_Freeze.dist.Distribution at 0x02EC4688>
 dist = <cx_Freeze.dist.Distribution instance at 0x03006850>
 msg = DistutilsArgError(GetoptError('option --pdb not recognized', 'pdb'),)
 
     def setup(**attrs):
         """The gateway to the Distutils: do everything your setup script needs
         to do, in a highly flexible and user-driven way.  Briefly: create a
         Distribution instance; find and parse config files; parse the command
         line; run each Distutils command found there, customized by the options
         supplied to 'setup()' (as keyword arguments), in config files, and on
         the command line.
     
         The Distribution instance might be an instance of a class supplied via
         the 'distclass' keyword argument to 'setup'; if no such class is
         supplied, then the Distribution class (in dist.py) is instantiated.
         All other arguments to 'setup' (except for 'cmdclass') are used to set
         attributes of the Distribution instance.
     
         The 'cmdclass' argument, if supplied, is a dictionary mapping command
         names to command classes.  Each command encountered on the command line
         will be turned into a command class, which is in turn instantiated; any
         class found in 'cmdclass' is used in place of the default, which is
         (for command 'foo_bar') class 'foo_bar' in module
         'distutils.command.foo_bar'.  The command class must provide a
         'user_options' attribute which is a list of option specifiers for
         'distutils.fancy_getopt'.  Any command-line options between the current
         and the next command are used to set attributes of the current command
         object.
     
         When the entire command-line has been successfully parsed, calls the
         'run()' method on each command object in turn.  This method will be
         driven entirely by the Distribution object (which each command object
         has a reference to, thanks to its constructor), and the
         command-specific options that became attributes of each command
         object.
         """
     
         global _setup_stop_after, _setup_distribution
     
         # Determine the distribution class -- either caller-supplied or
         # our Distribution (see below).
         klass = attrs.get('distclass')
         if klass:
             del attrs['distclass']
         else:
             klass = Distribution
     
         if 'script_name' not in attrs:
             attrs['script_name'] = os.path.basename(sys.argv[0])
         if 'script_args' not in attrs:
             attrs['script_args'] = sys.argv[1:]
     
         # Create the Distribution instance, using the remaining arguments
         # (ie. everything except distclass) to initialize it
         try:
             _setup_distribution = dist = klass(attrs)
         except DistutilsSetupError, msg:
             if 'name' in attrs:
                 raise SystemExit, "error in %s setup command: %s" % \
                       (attrs['name'], msg)
             else:
                 raise SystemExit, "error in setup command: %s" % msg
     
         if _setup_stop_after == "init":
             return dist
     
         # Find and parse the config file(s): they will override options from
         # the setup script, but be overridden by the command line.
         dist.parse_config_files()
     
         if DEBUG:
             print "options (after parsing config files):"
             dist.dump_option_dicts()
     
         if _setup_stop_after == "config":
             return dist
     
         # Parse the command line and override config files; any
         # command-line errors are the end user's fault, so turn them into
         # SystemExit to suppress tracebacks.
         try:
             ok = dist.parse_command_line()
         except DistutilsArgError, msg:
 >           raise SystemExit, gen_usage(dist.script_name) + "\nerror: %s" % msg
 E           SystemExit: usage: test.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
 E              or: test.py --help [cmd1 cmd2 ...]
 E              or: test.py --help-commands
 E              or: test.py cmd --help
 E           
 E           error: option --pdb not recognized
 
 attrs      = {'cmdclass': {'bdist_msi': <class cx_Freeze.windist.bdist_msi at 0x02ECAD18>, 'build': <class cx_Freeze.dist.build at ...amming\freeze_future\freeze_future\tests\example\foo.py>], 'name': 'foo', 'script_args': ['build', '--pdb', '-l'], ...}
 dist       = <cx_Freeze.dist.Distribution instance at 0x03006850>
 klass      = <class cx_Freeze.dist.Distribution at 0x02EC4688>
 msg        = DistutilsArgError(GetoptError('option --pdb not recognized', 'pdb'),)
 
 C:\Python27\lib\distutils\core.py:139: SystemExit
